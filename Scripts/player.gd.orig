extends CharacterBody2D

const SPEED = 300.0
const JUMP_VELOCITY = -800.0
const MAX_FALL_SPEED = 900
var g_mult = 1.0
var big_jump = false

var state = {
	"size": 0,
	"facing": "right",
	"isJumping": false,
	"isRunning": false,
	"isInAir": false,
	"isStarPower": false
}

@onready var sprite = $AnimatedSprite2D
<<<<<<< HEAD
@onready var collider = $Area2D
func _ready():
	collider.connect("area_entered", bounce)

func damage():
	#set_physics_process(false)
=======
@onready var debug_label = $DebugLabel

func _ready():
	Global.player = self

func damage():
	set_physics_process(false)
	print("velocity on damage: " + str(velocity.y))
>>>>>>> c4537283754c2438ea11700ac8dd65ac72d7e146
	sprite.play("small_die")

func bounce():
	velocity.y = JUMP_VELOCITY

func changeState(field, value):
	state[field] = value

func updateAnimation():
	# Verify correct facing
	if state.facing == "left":
		if not sprite.flip_h:
			sprite.flip_h = true
	elif sprite.flip_h:
		sprite.flip_h = false
	
	if state.isInAir: # Always use jumping frame when in air
		sprite.play("small_jump")
	elif velocity.x == 0:
		sprite.play("small_stand")
	else:
		sprite.play("small_run")

func _process(delta):
	debug_label.text = str(int(velocity.y))

func _physics_process(delta: float) -> void:
	# Add the gravity.
	if not is_on_floor():
		if not state.isInAir: # Ensure isInAir is true while not on floor
			changeState("isInAir", true)
		if velocity.y < 0 and state.isJumping:
			velocity += get_gravity() * delta * min(g_mult, 1)
			if g_mult < 1:
				g_mult = g_mult * 1.5
		elif velocity.y == 0:
			velocity.y -= JUMP_VELOCITY * .2
		elif velocity.y < MAX_FALL_SPEED:
			velocity += get_gravity() * delta
			if velocity.y > MAX_FALL_SPEED:
				velocity.y = MAX_FALL_SPEED
	elif state.isInAir: # Ensure isInAir is false while on floor
			changeState("isInAir", false)
	
	# Handle jump.
	if Input.is_action_just_pressed("ui_accept") and is_on_floor():
		bounce()
		g_mult = .3
		changeState("isJumping", true)
	if Input.is_action_just_released("ui_accept"):
		changeState("isJumping", false)
	
	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	if Input.is_action_just_pressed("ui_left"):
		changeState("facing", "left")
	if Input.is_action_just_pressed("ui_right"):
		changeState("facing", "right")
	
	var direction := Input.get_axis("ui_left", "ui_right")
	if direction:
		velocity.x = direction * SPEED
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)
	
	updateAnimation()
	
	move_and_slide()
